services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./ops/postgres/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${ORDERS_DB}"]
      interval: 5s
      timeout: 3s
      retries: 10

  rabbitmq:
    image: rabbitmq:3.13-management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "${RABBITMQ_AMQP_PORT}:5672"
      - "${RABBITMQ_HTTP_PORT}:15672"
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 5s
      timeout: 5s
      retries: 12

  service_order:
    build: ./service_order
    environment:
      DATABASE_URL: ${DATABASE_URL_ORDERS}
      RABBITMQ_URL: ${RABBITMQ_URL}
      FLASK_ENV: development
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "${ORDER_HTTP_PORT}:8000"
    volumes:
      - ./service_order:/app
    command: >
      gunicorn -w 1 -b 0.0.0.0:8000
      --reload
      --reload-extra-file events.py
      app:app

  service_payment:
    build: ./service_payment
    environment:
      RABBITMQ_URL: ${RABBITMQ_URL}
      FLASK_ENV: development
      PAYMENT_CONSUMER_ENABLED: "false"
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - "${PAYMENT_HTTP_PORT}:8000"
    volumes:
      - ./service_payment:/app
    command: >
      gunicorn -w 1 -b 0.0.0.0:8000
      --reload
      --reload-extra-file events.py
      app:app

volumes:
  pgdata:
